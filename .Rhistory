installed.packages('rvest')
library(rvest)
installed.packages('rvest')
clr()
installed.packages('dplyr')
installed.packages('dplyr')
install.packages('dplyr')
install.packages('nycflights13')
library(dplyr)
library(nycflights13)
head(flights)
summary(flights)
load("F:/R/R-Course-HTML-Notes/R-for-Data-Science-and-Machine-Learning/Machine Learning with R/.RData")
library(caTools)
set.seed(101)
sample<- sample.split(df$G3,SplitRatio = 0.7)
train<- subset(df,sample==TRUE)
test<- subset(df, sample==FALSE)
model<- lm(GE~ . , train)
model<- lm(G3~ . , train)
print(summary(model))
res<- residuals(model)
class(res)
res<- as.data.frame(res)
head(res)
library(ggplot2)
plot(model)
G3.predictions<- predict(model, test)
results<- cbind(G3.predictions, test$G3)
colnames(results)<- c('predicted','actual')
results<- as.data.frame(results)
print(head(results))
to_zero<- function(x){
if(x<0){
return(0)
}
else
{
return(x)
}
}
results$predicted<- sapply(results$predicted,to_zero)
mse<- mean((results$actual- results$predicted)^2)
print(mse)
print(mse^0.5)
SSE<- sum((results$predicted-results$actual)^2)
SST<- sum((mean(df$G3)- results$actual)^2)
R2<- 1- SSE/SST
print(R2)
install.packages('islr')
Y
install.packages('ISLR')
library(ISLR)
str(Caravan)
var(Caravan[,1])
var(Caravan[,2])
purchase<- Caravan[,86]
standardized.Caravan<- scale(Caravan[,-86])
print(var(standardized.Caravan)[,1:2])
print(var(standardized.Caravan)[,1])
test.index<-1:1000
test.data<- standardized.Caravan[test.index,]
test.purchase<- purchase[test.index]
train.data<- standardized.Caravan[-test.index,]
train.purchase<- purchase[-test.index]
library(class)
set.seed(101)
predicted.purchase<- knn(train.data,test.data,train.purchase,k=1)
print(head(predicted.purchase))
misclass.error<- mean(test.purchase!= predicted.purchase)
print(misclass.error)
predicted.purchase<- knn(train.data,test.data,train.purchase,k=3)
misclass.error<- mean(test.purchase!= predicted.purchase)
print(misclass.error)
predicted.purchase<- knn(train.data,test.data,train.purchase,k=5)
print(misclass.error)
misclass.error<- mean(test.purchase!= predicted.purchase)
print(misclass.error)
predicted.purchase<- NULL
error.rate<- NULL
for (i in 1:20) {
set.seed(101)
predicted.purchase<-knn(train.data,test.data,train.purchase,k=i)
error.rate[i]<- mean(test.purchase!=predicted.purchase)
}
print(error.rate)
library(ggplot2)
k.values<-1:20
error.df<- data.frame(error.rate,k.values)
print(error.df)
ggplot(error.df,aes(k.values,error.rate))+geom_point()+geom_line(lty='dotted',color='red')
install.packages('iris')
library(ISLR)
head(iris)
str(iris)
stand.feature<- scale(iris[1:4])
var(stand.feature)
var(stand.feature[,1])
final.data<- cbind(stand.feature,iris[5])
head(final.data)
library(caTools)
set.seed(101)
sample<- sample.split(final.data$Species,SplitRatio = 0.7)
test.data<- subset(final.data,sample==TRUE)
train.data<- subset(final.data,sample==TRUE)
test.data<- subset(final.data,sample==FALSE)
library(class)
predict1<- knn(train.data[1:4],test.data[1:4],k=1)
predict1<- knn(train.data[1:4],test.data[1:4],train.data$Species,k=1)
predict1
mean(test.data$Species!= predict1)
predict1<- NULL
error.rate<- NULL
for (i in 1:10) {
set.seed(101)
predict1<- knn(train.data,test.data,train.data$Species,k=i)
error.rate[i]<- mean(test.data$Species!= predict1)
}
print(error.rate)
for (i in 1:10) {
set.seed(101)
predict1<- knn(train.data[1:4],test.data[1:4],train.data$Species,k=i)
error.rate[i]<- mean(test.data$Species!= predict1)
}
print(error.rate)
library(ggplot2)
library(ggplot2)
k.values<-1:10
error.df<-data.frame(error.rate,k.values)
ggplot(error.df,aes(k.values,error.rate))+geom_point()+geom_line(lty='dotted',color='red')
mydata <- read.csv("C:/Users/Nirpeksh Nandan/Downloads/Stuti/data.csv", header = TRUE)
mydata
install.packages("ggplot2")
library(ggplot2)
str(mydata)
pl <- ggplot(mydata, aes(MyProd1_Rx, CompProd1_Rx, color= customer_id))
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
str(mydata)
library(ggplot2)
remove.packages("ggplot2")
install.packages("ggplot2", dependencies = T)
source('~/.active-rstudio-document')
library(ggplot2)
library(devtools)
find_rtools()
load("F:/DataScienceCourse/.RData")
library(swirl)
swirl()
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.1,4)
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
info()
skip
skip()
FALSE & FALSE
TRUE & c(TRUE,F,F)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6, !FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
source('C:/Users/NIRPEK~1/AppData/Local/Temp/RtmpEZ8Ei5/boring_function.R')
submit()
boring_function('My first function!')
boring_function
source('C:/Users/NIRPEK~1/AppData/Local/Temp/RtmpEZ8Ei5/my_mean.R')
submit()
my_mean(c(4,5,10))
source('C:/Users/NIRPEK~1/AppData/Local/Temp/RtmpEZ8Ei5/remainder.R')
submit
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
source('C:/Users/NIRPEK~1/AppData/Local/Temp/RtmpEZ8Ei5/evaluate.R')
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[-1]},c(8,4,0))
?paste
paste("Programming","is","fun")
paste("Programming","is","fun!")
source('C:/Users/NIRPEK~1/AppData/Local/Temp/RtmpEZ8Ei5/telegram.R')
submit()
telegram("Hi")
skip()
Bangalore,superb,ball
mad_libs("BLORE","SUPER","BAT")
source('C:/Users/NIRPEK~1/AppData/Local/Temp/RtmpEZ8Ei5/bin_op.R')
submit()
source('C:/Users/NIRPEK~1/AppData/Local/Temp/RtmpEZ8Ei5/bin_op.R')
submit()
'I' %p% 'love' %p% 'R'
'I' %p% 'love' %p% 'R!'
d1<-Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2<- as.Date("1936-01-01")
d2<- as.Date("1969-01-01")
unclass(d2)
t1<-Sys.Date()
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<- strptime("October 17 1986 08:24")
skip()
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
source('F:/DataScienceCourse/ProgrammingAssignment2/cachematrix.R')
library(swirl)
swirl()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<- lapply(flags, unique)
unique_vals
length(unique_vals)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vlas, function(elem)elem[21])
lapply(unique_vals, function(elem)elem[21])
lapply(unique_vals, function(elem)elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply(vector, index, function)
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
install_from_swirl("Getting and Cleaning Data")
library(datasets)
data("cars")
data(cars)
with(cars,plot(speed,dist))
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages(p, quiet = TRUE)
install.packages("gglot2")
install.packages("ggplot2")
library(ggplot2)
swirl()
library(swirl)
swirl()
head(pollution)
dim(pollution)
pollution$pm25
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm, col = "green")
rug
rug(ppm)
low
high
hist(ppm,col = "green", breaks = 100)
rug(ppm)
hist(ppm,col = "green")
abline(v=12,lwd=2)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
reg<- table(pollution$region)
reg
barplot(reg,col = "wheat",main = "Number of Countries in Each Region")
barplot(reg,col = "wheat",main = "Number of Counties in Each Region")
boxplot(pm25~region,data = pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<- subset(pollution, region=="east")
head(east)
hist(east$pm25)
hist(east$pm25, col = "green")
hist(subset(pollution,region="west")$pm25, col = "green")
hist(subset(pollution,region=="west")$pm25, col = "green")
with()
to with(pollution,plot(latitude,pm25))
with(pollution,plot(latitude,pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,pollution$ppm,col=pollution$region)
plot(pollution$latitude,ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west<- subset(pollution,region="west")
west<- subset(pollution,region=="west")
plot(west$latitude,west$pm25,main = "west")
plot(west$latitude, west$pm25, main = "West")
plot(west$latitude, west$pm25, main = "East")
plot(east$latitude, east$pm25, main = "East")
?Devices
plot(faithful,plot(eruptions,waiting))
skip()
with(faithful, plot(eruptions, waiting, main = "Old Faithful Geyser data"))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting, main = "Old Faithful Geyser data"))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions,
| waiting))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(str)
head(cars)
skip()
skip()
head(state)
table(state$region)
xyplot(Life.Exp~Income| region,data = state,c(4,1))
xyplot(Life.Exp~Income| region,data = state,layout=c(4,1))
xyplot(Life.Exp~Income| region,data = state,layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy,data = mpg)
head(airquality)
range()
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone
| (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
skip()
title("Ozone and wind in New York")
title(main="Ozone and Wind in New York City")
setwd("F:/DataScienceCourse")
install.packages("knitr")
setwd("F:/DataScienceCourse/RepData_PeerAssessment1")
